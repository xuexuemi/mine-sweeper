{"version":3,"sources":["components/Cell.js","components/Board.js","components/Game.js","index.js"],"names":["Cell","props","imgURL","useRef","className","onMouseDown","event","buttons","handleHold","row","col","setButtons","handleFlag","handleHoldNeighbors","preventDefault","onMouseUp","handleGameStart","handleUnhold","handleReveal","handleUnholdNeighbors","handleRevealNeighbors","onMouseOver","onMouseOut","onContextMenu","style","bgColor","status","current","process","tag","backgroundImage","backgroundSize","backgroundColor","setStyle","Board","i","j","k","useState","reveal","rowIndex","columnIndex","setCellStatus","prevStatus","slice","cellTags","handleGameOver","stack","length","shift","new_i","neighbors","new_j","numRows","numCols","push","hold","holdNeighbors","cellStatus","unhold","unholdNeighbors","flag","setNumFlagsLeft","c","setNumMinesLeft","revealNeighbors","numFlags","mineIndex","map","rowTags","MyButton","styled","Button","fontSize","fontFamily","padding","marginBottom","Game","result","setResult","resultColor","setResultColor","isFirstRender","gameHasStarted","timerID","time","setTime","gameMode","setGameMode","setNumRows","setNumCols","numMines","setNumMines","numMinesLeft","numFlagsLeft","setCellTags","newGame","mines","tags","statusRow","minesRow","tagsRow","countMines","Math","floor","random","numNeighborMines","clearInterval","useEffect","onChange","target","value","type","id","checked","for","textAlign","variant","onClick","setInterval","win","statusCell","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4aa7e4a0.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nfunction Cell(props) {\n  const imgURL = useRef(null);\n\n  function setStyle() {\n    var bgColor = \"#b0b0b0\";\n\n    switch (props.status) {\n      case 2:\n        imgURL.current = process.env.PUBLIC_URL + \"/images/Minesweeper_0.svg.png\";\n        break;\n      case 1:\n        imgURL.current = process.env.PUBLIC_URL + \"/images/Minesweeper_unopened_square.svg.png\";\n        break;\n      case 0:\n        imgURL.current = process.env.PUBLIC_URL + \"/images/Minesweeper_\" + props.tag + \".svg.png\";\n        break;\n      case -2: // game over\n        if (props.tag === 9) {\n          imgURL.current = process.env.PUBLIC_URL + \"/images/Minesweeper_9.svg.png\";\n          bgColor = \"red\"\n        }\n        break;\n      case -4:\n        imgURL.current = process.env.PUBLIC_URL + \"/images/Minesweeper_9w.svg.png\";\n        break;\n\n      case -1: case -5:\n        imgURL.current = process.env.PUBLIC_URL + \"/images/Minesweeper_flag.svg.png\";\n        break;\n      \n      default:\n        break;\n    }\n\n    return {\n      backgroundImage: \"url(\" + imgURL.current + \")\",\n      backgroundSize: \"cover\",\n      backgroundColor: bgColor\n    };\n  }\n\n  // disable context menu when right click\n  function handleContextMenu(event) {\n    event.preventDefault();\n  }\n\n  function handleMouseDown(event) {\n    switch (event.buttons) {\n      case 1:\n        props.handleHold(props.row, props.col);\n        props.setButtons(() => event.buttons);\n        break;\n      case 2:\n        props.handleFlag(props.row, props.col);\n        break;\n      case 3:\n        props.handleHoldNeighbors(props.row, props.col);\n        props.setButtons(() => event.buttons);\n        break;\n      default:\n        break;\n    }\n    event.preventDefault();\n  }\n\n  function handleMouseOver(event) {\n    switch (props.buttons) {\n      case 1:\n        props.handleHold(props.row, props.col);\n        break;\n      case 3:\n        props.handleHoldNeighbors(props.row, props.col);\n        break;\n      default:\n        break;\n    }\n    event.preventDefault();\n  }\n\n  function handleMouseOut(event) {\n    switch (props.buttons) {\n      case 1:\n        props.handleUnhold(props.row, props.col);\n        break;\n      case 3:\n        props.handleUnholdNeighbors(props.row, props.col);\n        break;\n      default:\n        break;\n    }\n    event.preventDefault();\n  }\n\n  function handleMouseUp(event) {\n    switch (props.buttons) {\n      case 1:\n        props.handleGameStart();\n        \n        props.handleUnhold(props.row, props.col);\n        props.handleReveal(props.row, props.col);\n        break;\n      case 3:\n        props.handleUnholdNeighbors(props.row, props.col);\n        props.handleRevealNeighbors(props.row, props.col);\n        break;\n      default:\n        break;\n    }\n\n    props.setButtons(() => 0);\n\n    event.preventDefault();\n  }\n\n  return (\n    <div className=\"cell\" onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} onMouseOver={handleMouseOver} onMouseOut={handleMouseOut} onContextMenu={handleContextMenu} style={setStyle()}></div>\n  );\n}\n\nexport default Cell;\n","import React, { useState, useRef } from \"react\";\nimport Cell from \"./Cell\";\n\nfunction Board(props) {\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  \n  const [buttons, setButtons] = useState(0);\n\n  \n  function reveal(rowIndex, columnIndex) {\n    props.setCellStatus(prevStatus => {\n      var status = prevStatus.slice();\n\n      if (status[rowIndex][columnIndex] === 1) {\n        if (props.cellTags[rowIndex][columnIndex] === 9) {\n          // game over\n          props.handleGameOver(false,rowIndex, columnIndex);\n        } else {\n          var stack = [[rowIndex, columnIndex]];\n\n          while (stack.length > 0) {\n            [i, j] = stack.shift();\n            status[i][j] = 0;\n            //props.countRevealedCells();\n\n            if (props.cellTags[i][j] === 0) {\n              for (k = 0; k < 8; k++) {\n                var new_i = i + props.neighbors[k][0];\n                var new_j = j + props.neighbors[k][1];\n\n                if (new_i >= 0 && new_i < props.numRows && new_j >= 0 && new_j < props.numCols && status[new_i][new_j] === 1) {\n                  stack.push([new_i, new_j]);\n                }\n              }\n            }\n          }\n        }\n      }\n      return status;\n    });\n  }\n\n  function hold(rowIndex, columnIndex) {\n    props.setCellStatus(prevStatus => {\n      var status = prevStatus.slice();\n\n      if (status[rowIndex][columnIndex] === 1) {\n        status[rowIndex][columnIndex] = 2;\n      }\n      return status;\n    });\n  }\n\n  function holdNeighbors(rowIndex, columnIndex) {\n    if (props.cellStatus[rowIndex][columnIndex] === 0) {\n      for (k = 0; k < 8; k++) {\n        i = rowIndex + props.neighbors[k][0];\n        j = columnIndex + props.neighbors[k][1];\n\n        if (i >= 0 && i < props.numRows && j >= 0 && j < props.numCols && props.cellStatus[i][j] === 1) {\n          hold(i, j);\n        }\n      }\n    }\n  }\n\n  function unhold(rowIndex, columnIndex) {\n    props.setCellStatus(prevStatus => {\n      var status = prevStatus.slice();\n\n      if (status[rowIndex][columnIndex] === 2) {\n        status[rowIndex][columnIndex] = 1;\n      }\n      return status;\n    });\n  }\n\n  function unholdNeighbors(rowIndex, columnIndex) {\n    unhold(rowIndex, columnIndex);\n\n    for (k = 0; k < 8; k++) {\n      i = rowIndex + props.neighbors[k][0];\n      j = columnIndex + props.neighbors[k][1];\n\n      if (i >= 0 && i < props.numRows && j >= 0 && j < props.numCols && props.cellStatus[i][j] === 2) {\n        unhold(i, j);\n      }\n    }\n  }\n\n  function flag(rowIndex, columnIndex) {\n    props.setCellStatus(prevStatus => {\n      var status = prevStatus.slice();\n\n      if (status[rowIndex][columnIndex] === 1) {\n        status[rowIndex][columnIndex] = -1;\n\n        props.setNumFlagsLeft(c => c - 1);\n\n        if (props.cellTags[rowIndex][columnIndex] === 9) {\n          props.setNumMinesLeft(c => {\n            // check if game is over\n            if (c === 1) {\n              props.handleGameOver(true, rowIndex, columnIndex);\n            }\n\n            return c - 1;\n          });\n        }\n      } else if (status[rowIndex][columnIndex] === -1) {\n        status[rowIndex][columnIndex] = 1;\n        props.setNumFlagsLeft(c => c + 1);\n\n        if (props.cellTags[rowIndex][columnIndex] === 9) {\n          props.setNumMinesLeft(c => c + 1);\n        }\n      }\n      return status;\n    });\n    \n  }\n\n  function revealNeighbors(rowIndex, columnIndex) {\n    props.setCellStatus(prevStatus => {\n      var status = prevStatus.slice();\n\n      if (status[rowIndex][columnIndex] === 0) {\n        var numFlags = 0;\n        for (k = 0; k < 8; k++) {\n          i = rowIndex + props.neighbors[k][0];\n          j = columnIndex + props.neighbors[k][1];\n\n          if (i >= 0 && i < props.numRows && j >= 0 && j < props.numCols && status[i][j] === -1) {\n            numFlags++;\n          }\n        }\n\n        if (numFlags === props.cellTags[rowIndex][columnIndex]) {\n          var mineIndex = [];\n\n          for (k = 0; k < 8; k++) {\n            i = rowIndex + props.neighbors[k][0];\n            j = columnIndex + props.neighbors[k][1];\n\n            if (i >= 0 && i < props.numRows && j >= 0 && j < props.numCols && status[i][j] === 1) {\n              if (mineIndex.length === 0 && props.cellTags[i][j] === 9) {\n                mineIndex = [i, j];\n              }\n\n              var stack = [[i, j]];\n\n              while (stack.length > 0) {\n                var [i, j] = stack.shift();\n                status[i][j] = 0;\n\n                if (props.cellTags[i][j] === 0) {\n                  for (k = 0; k < 8; k++) {\n                    var new_i = i + props.neighbors[k][0];\n                    var new_j = j + props.neighbors[k][1];\n\n                    // some issue because of unfolding (setState asynchronic)\n                    if (new_i >= 0 && new_i < props.numRows && new_j >= 0 && new_j < props.numCols && status[new_i][new_j] >= 1) {\n                      stack.push([new_i, new_j]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (mineIndex.length > 0) {\n            props.handleGameOver(false,mineIndex[0],mineIndex[1]);\n          }\n        }\n      }\n      return status;\n    });\n  }\n\n  return (\n    <div className=\"board\">\n      \n      {props.cellTags.map((rowTags, rowIndex) => {\n        return (\n          <div className=\"row\">\n            {rowTags.map((tag, columnIndex) => {\n              return (\n                <Cell\n                  key={rowIndex * 10 + columnIndex}\n                  row={rowIndex}\n                  col={columnIndex}\n                  tag={tag}\n                  status={props.cellStatus[rowIndex][columnIndex]}\n                  buttons={buttons}\n                  setButtons={setButtons}\n                  handleReveal={reveal}\n                  handleFlag={flag}\n                  handleHold={hold}\n                  handleUnhold={unhold}\n                  handleHoldNeighbors={holdNeighbors}\n                  handleUnholdNeighbors={unholdNeighbors}\n                  handleRevealNeighbors={revealNeighbors}\n                  handleGameStart={() => props.handleGameStart()}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Board;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Board from \"./Board\";\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\nimport { green } from \"@material-ui/core/colors\";\n\n\nconst MyButton = styled(Button)({\n  fontSize: \"20px\",\n  fontFamily: 'Architects Daughter',\n  padding: \"0px 10px\",\n  marginBottom: \"18px\",\n});\n\n\nfunction Game() {\n\n  const [result, setResult] = useState(\"\");\n  const [resultColor, setResultColor] = useState(\"white\");\n\n  const neighbors = [\n    [1, 0],\n    [1, -1],\n    [0, -1],\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, 1],\n    [1, 1],\n  ];\n  const isFirstRender = useRef(true);\n\n  const gameHasStarted = useRef(null);\n  const timerID = useRef(null);\n  const [time, setTime] = useState(0);\n\n  const [gameMode, setGameMode] = useState(\"intermediate\");\n  const [numRows, setNumRows] = useState(16);\n  const [numCols, setNumCols] = useState(16);\n  const [numMines, setNumMines] = useState(40);\n\n  const [numMinesLeft, setNumMinesLeft] = useState(40);\n  const [numFlagsLeft, setNumFlagsLeft] = useState(40);\n\n  const [cellStatus, setCellStatus] = useState([]);\n  const [cellTags, setCellTags] = useState([]);\n\n  function initBoard(event) {\n    \n    setGameMode(event.target.value);\n\n    switch (event.target.value) {\n      case \"beginner\":\n        setNumRows(9);\n        setNumCols(9);\n        setNumMines(10);\n        break;\n\n      case \"intermediate\":\n        setNumRows(16);\n        setNumCols(16);\n        setNumMines(40);\n        break;\n\n      case \"expert\":\n        setNumRows(16);\n        setNumCols(30);\n        setNumMines(99);\n        break;\n    }\n\n    //event.preventDefault();\n  }\n\n  useEffect(() => {\n    if (!isFirstRender.current) {\n      newGame();\n    }\n    \n  }, [numMines]);\n\n  useEffect(() => {\n    isFirstRender.current = false;\n    newGame();\n  }, []);\n\n  function newGame() {\n    var status = [];\n    var mines = [];\n    var tags = [];\n\n    for (var i = 0; i < numRows; i++) {\n      var statusRow = [];\n      var minesRow = [];\n      var tagsRow = [];\n\n      for (var j = 0; j < numCols; j++) {\n        statusRow.push(1);\n        minesRow.push(0);\n        tagsRow.push(0);\n      }\n      status.push(statusRow);\n      mines.push(minesRow);\n      tags.push(tagsRow);\n    }\n\n    // set tag = 1 indicating hasMine is true\n    var countMines = 0;\n    while (countMines < numMines) {\n      var k = Math.floor(Math.random() * numCols * numRows);\n\n      var i = Math.floor(k / numCols);\n      var j = Math.floor(k % numCols);\n\n      if (mines[i][j] === 1) {\n        continue;\n      }\n\n      mines[i][j] = 1;\n      countMines++;\n    }\n\n    // update tag\n\n    for (var i = 0; i < numRows; i++) {\n      for (var j = 0; j < numCols; j++) {\n        if (mines[i][j] === 1) {\n          tags[i][j] = 9;\n        } else {\n          var numNeighborMines = 0;\n\n          for (var k = 0; k < 8; k++) {\n            var new_i = i + neighbors[k][0];\n            var new_j = j + neighbors[k][1];\n\n            if (new_i >= 0 && new_i < numRows && new_j >= 0 && new_j < numCols) {\n              numNeighborMines = numNeighborMines + mines[new_i][new_j];\n            }\n          }\n\n          tags[i][j] = numNeighborMines;\n        }\n      }\n    }\n\n    setCellStatus(status);\n    setCellTags(tags);\n\n    gameHasStarted.current = false;\n    clearInterval(timerID.current);\n    setTime(0);\n    setNumFlagsLeft(numMines);\n    setNumMinesLeft(numMines);\n    setResult(\"\");\n    setResultColor(\"white\");\n  }\n\n  function gameStart() {\n    if (!gameHasStarted.current) {\n      gameHasStarted.current = true;\n      timerID.current = setInterval(() => {\n        setTime(c => c + 1);\n      }, 1000);\n    }\n  }\n\n  function gameOver(win, rowIndex, columnIndex) {\n    clearInterval(timerID.current);\n    \n    if (win) {\n      setResult(\"Congratulations! You win!\");\n      setResultColor(\"green\");\n    } else {\n      setResult(\"Bomb! Game over!\");\n      setResultColor(\"red\");\n    }\n\n    // lock the board\n    setCellStatus(prevStatus => {\n      var status = prevStatus.slice();\n      status = status.map((statusRow, i) => {\n        return statusRow.map((statusCell, j) => {\n          if (statusCell !== 0) {\n            if (cellTags[i][j] === 9) {\n              if (statusCell === -1) {\n                return -3;\n              } else {\n                return 0;\n              }\n            } else {\n              if (statusCell === -1) {\n                return -4;\n              } else {\n                return -2;\n              }\n            }\n          } else {\n            return 0;\n          }\n        });\n      });\n\n      if (numMinesLeft === 1) {\n        status[rowIndex][columnIndex] = -5;\n      } else {\n        status[rowIndex][columnIndex] = -2;\n      }\n      \n\n      return status;\n    });\n  }\n\n  return (\n    <div>\n      <div className=\"top-bar center\">\n        <form  onChange={initBoard}>\n          <input className=\"top-bar-radio-first\" type=\"radio\" id=\"beginner\" value=\"beginner\" checked={gameMode === \"beginner\"} />\n          <label for=\"beginner\">Beginner</label>\n\n          <input className=\"top-bar-radio\" type=\"radio\" id=\"intermediate\" value=\"intermediate\" checked={gameMode === \"intermediate\"} />\n          <label for=\"intermediate\">Intermediate</label>\n\n          <input className=\"top-bar-radio\" type=\"radio\" id=\"expert\" value=\"expert\" checked={gameMode === \"expert\"} />\n          <label for=\"expert\">Expert</label>\n        </form>\n      </div>\n      <div className=\"center\">\n        <span>(flags)</span>\n        <span className=\"counter\" style={{textAlign: \"start\"}}>{numFlagsLeft}</span>\n        {/* <button className=\"reset-button\" onClick={newGame}>New Game</button> */}\n        <MyButton variant=\"contained\" onClick={newGame}>New Game</MyButton>\n        <span className=\"counter\" style={{textAlign: \"end\"}}>{time}</span>\n        <span>(sec)</span>\n      </div>\n\n      <Board\n        neighbors={neighbors}\n        numRows={numRows}\n        numCols={numCols}\n        numMines={numMines}\n        cellTags={cellTags}\n        cellStatus={cellStatus}\n        setCellStatus={setCellStatus}\n        setNumMinesLeft={setNumMinesLeft}\n        setNumFlagsLeft={setNumFlagsLeft}\n        handleGameStart={gameStart}\n        handleGameOver={gameOver}\n      />\n\n      <h2 style={{backgroundColor: resultColor}}>{result}</h2>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\n//import Counter from \"./components/Counter\";\n\n\nReactDOM.render(<Game />, document.getElementById('root'));"],"sourceRoot":""}